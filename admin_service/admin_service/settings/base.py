"""
Django settings for django_app project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import environ
import raven

env = environ.Env(DEBUG=(bool, False))  # set default values and casting
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "a8m7&irp9qcdn=8-_*ag)qu@+k8o!_)dn90esu(4e%jp-bz!*s"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "admin_service",
    "cv_profiles",
    "cvscripts",
    "payments",
    "paystack",
    "quickbooks",
    "raven.contrib.django.raven_compat",
]

MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "admin_service.urls"
CORS_ORIGIN_ALLOW_ALL = True

WSGI_APPLICATION = "admin_service.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    "default": env.db("SERVICE_DATABASE_URL", default=""),
    "services": env.db("DATABASE_URL", default=""),
    # 'replica': env.db('REPLICA_DATABASE_URL', default='postgres://tuteria:punnisher@127.0.0.1:5435/tuteria')
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

TEMPLATES = [{
    "BACKEND": "django.template.backends.django.DjangoTemplates",
    "DIRS": [os.path.join(BASE_DIR, "..", "templates")],
    "APP_DIRS": True,
    "OPTIONS": {
        "context_processors": [
            "django.template.context_processors.debug",
            "django.template.context_processors.request",
            "django.contrib.auth.context_processors.auth",
            "django.contrib.messages.context_processors.messages",
        ]
    },
}]

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME":
        "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.MinimumLengthValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "..", "static")]
STATIC_ROOT = env(
    "STATIC_ROOT", default=os.path.join(BASE_DIR, "..", "staticfiles"))
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
PAYMENT_SERVICE = env("PAYMENT_SERVICE", default="http://localhost:8002")
# CVSCRIPT_SERVICE = env("CVSCRIPT_SERVICE", default="http://localhost:8001")
CVSCRIPT_SERVICE = env(
    "CVSCRIPT_SERVICE", default="https://cvscript-staging.careerlyft.com")
AUTH_SERVICE = env(
    "AUTH_SERVICE", default="https://authentication.careerlyft.com")
RAVEN_CONFIG = {
    "dsn":
    "https://7b764b7e30384446994260fa6d3c400e:46ff83156629483b8a4fa1614c2e9e05@sentry.io/1255807",
    #  If  you  are  using  git,  you  can  also  automatically  configure  the
    #  release  based  on  the  git  info.
    # "release": raven.fetch_git_sha(os.path.abspath(os.pardir)),
}
HIJACK_URL = env("HIJACK_URL", default="https://authentication.careerlyft.com")
PAYSTACK_PUBLIC_KEY = os.getenv("PAYSTACK_PUBLIC_KEY", "")
PAYSTACK_SECRET_KEY = os.getenv('PAYSTACK_SECRET_KEY', "")
